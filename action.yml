name: 'Deploy Jitsi Component'
description: 'Build and deploy a jitsi component'
inputs:
  component:
    description: 'One of the following values: jibri, jicofo, jigasi, jvb, prosody, web'
    required: true
  docker-username:
    description: 'Docker Hub username'
    required: true
  docker-password:
    description: 'Docker Hub password'
    required: true
  tag:
    description: 'Docker image tag'
    required: true
    default: 'latest'
  kube-config:
    description: 'Kube config yaml file'
    required: true
  kube-config-file:
    description: 'Where to put kubeconfig file'
    required: true
    default: '$HOME/.kubeconfig'

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-password }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      env:
        DOCKER_BUILDKIT: '1'

      with:
        context: ./${{ inputs.component }}
        push: true
        tags: ${{ inputs.docker-username }}/${{ inputs.component }}:${{ inputs.tag }}
        cache-from: type=registry,ref=${{ inputs.docker-username }}/${{ inputs.component }}:buildcache
        cache-to: type=registry,ref=${{ inputs.docker-username }}/${{ inputs.component }}:buildcache,mode=max
        builder: ${{ steps.setup-buildx.outputs.name }}

    - name: Setup kubeconfig
      shell: bash
      run: |
        echo "${{ inputs.kube-config }}" > "${{ inputs.kube-config-file }}"
        chmod 600 "${{ inputs.kube-config-file }}"

    - name: Deploy to Kubernetes
      shell: bash
      run: |
        echo "Setting KUBECONFIG..."

        export KUBECONFIG="$HOME/.kubeconfig"

        echo "Checking Kubernetes connectivity..."

        kubectl cluster-info

        echo "Retrieving pods..."

        POD_NAMES=$(kubectl get pods --no-headers | awk '{print $1}' || -1)

        if [ $POD_NAMES -eq -1 ]; then
          echo "Failed to retrieve pods."
          exit 1
        fi

        if [ -z $POD_NAMES ]; then
          echo "No pods found."
          exit 0
        fi

        POD_COUNT="$(echo $POD_NAMES | wc -l)"
        MATCH="jitsi.*-${{ inputs.component }}-"

        echo "$POD_COUNT pods found"
        echo 'Matching pods with $MATCH...'

        MATCHING_PODS=$(echo "$POD_NAMES" | grep "$MATCH" || -1)

        if [ $MATCHING_PODS -eq -1 ]; then
          echo "Failed to match pods with $MATCH"
          exit 1
        fi

        if [ -z "$MATCHING_PODS" ]; then
          echo "No matching pods to delete."
          exit 0
        fi

        echo "Deleting pods..."
        echo "$MATCHING_PODS" | xargs -P 16 -n 1 kubectl delete pod
